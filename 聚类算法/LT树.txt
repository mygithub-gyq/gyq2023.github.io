2023.7.10
#LT树

Q1：什么是LT树？
Q2：用来干什么？
Q3：怎么表示？
Q4：在数据挖掘中的应用？
Q5：怎样用编程实现？

可能需要的材料：

1.LoDOG的论文
2.文中的示例
3.链表
4.有了LT树，如何得到簇
5.对聚类中心之间的线剪掉，即距离为0
6.聚类中心的个数与各个中心到其覆盖的点之间的距离累积，做一个函数，这样聚类中心个数自动化
7.簇的覆盖率和特异性衡量聚类的紧密程度
8.时间复杂度，运行的单位时间

Q1：
LT树：

在LT树中，除根节点外的每个节点都由其父节点引导加入同一个簇。因此我们称这棵树为先导树(LT)

对于每个数据点，需要记录在密度比其大的一堆点中，找最近的，将其索引放在一个数组中，最终得到一个N维数组，这个数组可以转化为一个LT树。

那什么是树呢？树是一个由根节点领导，子节点追随的一个结构，就好比一棵大树的根干与分支，好多的一个个大树放在一起，组成了树。

Q2：
可以用于聚类

LT树的优点：

1.减少了将每个数据点分配给中心的运行时间，只需断开中心之间的连接
2.表示的信息量更大

Q3：
python代码：

#P是那个数组，将其转换为LT树

def construct_LT(P, gama_Inds):
    N = len(P)
    LT = [[] for _ in range(N)]
    for i in range(1, N):
        child_id = gama_Inds[i]
        parent_id = P[child_id]
        LT[parent_id].append(child_id)
    return LT

P = [11, 12, 12, 5, 5, 12, 7, 5, 10, 10, 12, 12, -1]  # 节点索引，从0开始
gama_Inds = [12, 10, 5, 2, 11, 9, 8, 1, 3, 7, 0, 4, 6]  # 节点索引，从0开始
LT = construct_LT(P=P, gama_Inds=gama_Inds)
print(LT)

Q4：
LoDOG算法中的一部分，可以识别任意形状的数据，且聚类中心的个数是算出来的，结合了根节点到子节点的距离累积求和，总而言之，这个算法是很好的。

Q5：
上面已实现。